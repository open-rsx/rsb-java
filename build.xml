<project xmlns:jacoco="antlib:org.jacoco.ant" name="RSBJava" default="dist">

	<description>
        Build file for Java Bindings of Robotics Service Bus Middleware
    </description>

	<property name="version.major" value="0.11"/>

	<!-- set global properties for this build -->
	<property file="build.properties" />
	<property environment="env" />
	<property name="src.dir" location="src" />
	<property name="src.dir.protocol" location="generated-protocol" />
	<property name="src.dir.spread" location="spread-src" />
	<property name="src.dir.test" location="test" />
	<property name="src.dir.examples" location="examples" />
	<property name="build.dir" location="build" />
	<property name="build.dir.src" location="${build.dir}/src" />
	<property name="build.dir.protocol" location="${build.dir}/protocol" />
	<property name="build.dir.spread" location="${build.dir}/spread" />
	<property name="build.dir.test" location="${build.dir}/test" />
	<property name="build.dir.examples" location="${build.dir}/examples" />
	<property name="dist.dir" location="dist" />
	<property name="lib.dir" location="lib" />
	<property name="pbuf.protoc" location="/usr/bin/protoc" />
	<property name="pbuf.lib" location="/usr/share/java/protobuf-java.jar" />
	<property name="pbuf.protopath" location="${env.prefix}/share/rsbprotocol" />
	<property name="prefix.dir" location="${env.prefix}" />
	<property name="license.dir" location="${prefix.dir}/share/doc/rsbjava" />
	<property name="install.dir" location="${prefix.dir}/share/java" />
	<property name="dir.report.unittests.xml" location="testreports" />
	<property name="dir.config.codecheck" location="codecheck" />
	<property name="dir.report.codecheck" location="codecheckreports" />
	<property name="dir.doc" location="doc" />
	<property name="coverage.out.dir" value="coverage" />
	<property name="spread.daemon" location="/usr/sbin/spread" />
	<property name="rsb.java.compatibility" value="1.5" />

	<property name="git.executable" value="git" />
	<property name="git.versionfile" location="${build.dir}/gitversion" />
	<property name="git.branchfile" location="${build.dir}/gitbranch" />

	<property name="failtests" value="false" />

	<!-- availability checks for external dependencies -->
	<fail message="Google Protocol Buffers compiler not found at '${pbuf.protoc}'. Please set pbuf.protoc.">
		<condition>
			<not>
				<available file="${pbuf.protoc}" />
			</not>
		</condition>
	</fail>
	<fail message="Google Protocol Buffers library not found at '${pbuf.lib}'. Please set pbuf.lib.">
		<condition>
			<not>
				<available file="${pbuf.lib}" />
			</not>
		</condition>
	</fail>
	<fail message="RSB protocol property pbuf.protopath does not point to a valid installation of RSBProtocol at 'pbuf.protopath'">
		<condition>
			<not>
				<available file="${pbuf.protopath}/rsb/protocol/Notification.proto" />
			</not>
		</condition>
	</fail>
	<fail message="Spread daemon not found at '${spread.daemon}'. Please set spread.daemon.">
		<condition>
			<not>
				<available file="${spread.daemon}" />
			</not>
		</condition>
	</fail>

	<!-- set up ant-contrib -->
	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
		<classpath>
			<pathelement location="${lib.dir}/ant-contrib-1.0b3.jar" />
		</classpath>
	</taskdef>

	<target name="gitversion" description="Get patch version from git">

		<mkdir dir="${build.dir}" />
		<exec executable="${git.executable}" output="${git.versionfile}" failifexecutionfails="false" errorproperty="git.version.failed">
			<arg value="describe" />
			<arg value="--tags" />
			<arg value="--long" />
			<arg value="--match" />
			<arg value="release-*.*" />
		</exec>

		<loadfile srcfile="${git.versionfile}" property="git.version.patch" failonerror="false">
			<filterchain>
				<headfilter lines="1" skip="0" />
				<tokenfilter>
					<replaceregex pattern="-g[0-9a-fA-F]+$" replace="" flags="gi" />
					<replaceregex pattern="^.*-" replace="" flags="gi" />
				</tokenfilter>
				<striplinebreaks />
			</filterchain>
		</loadfile>

		<exec executable="${git.executable}" output="${git.branchfile}" failifexecutionfails="false" errorproperty="git.branch.failed">
			<arg value="rev-parse" />
			<arg value="--abbrev-ref" />
			<arg value="HEAD" />
		</exec>

		<loadfile srcfile="${git.branchfile}" property="git.branch" failonerror="false">
			<filterchain>
				<headfilter lines="1" skip="0" />
				<striplinebreaks />
			</filterchain>
		</loadfile>

		<condition property="version" value="${version.major}.${git.version.patch}" else="${version.major}.0">
			<and>
				<isset property="git.version.patch" />
				<length string="${git.version.patch}" trim="yes" length="0" when="greater" />
				<isset property="git.branch" />
				<matches pattern="^[0-9]+\.[0-9]+$" string="${git.branch}" />
			</and>
		</condition>

		<!-- Extract hash from gitversion file, if possible -->
		<loadfile srcfile="${git.versionfile}" property="git.version.commit" failonerror="false">
			<filterchain>
				<headfilter lines="1" skip="0" />
				<tokenfilter>
					<containsregex pattern=".*-(g[0-9a-fA-F]+)$" replace="\1" flags="gi" />
				</tokenfilter>
				<striplinebreaks />
			</filterchain>
		</loadfile>

		<!-- Extract hash using git log for shallow copies -->
		<exec executable="${git.executable}" outputproperty="git.version.commit.online" failifexecutionfails="false" errorproperty="git.version.commit.failed">
			<arg value="log" />
			<arg value="-1" />
			<arg value="--pretty=format:g%h" />
		</exec>

		<!-- First, try to load the hash from the version file so that it is available in archives. -->
		<condition property="commit" value="${git.version.commit}">
			<and>
				<isset property="git.version.commit" />
				<length string="${git.version.commit}" trim="yes" length="0" when="greater" />
			</and>
		</condition>

		<!-- Second, use the one defined from git log which works even on shallow copies but should not override the one from the versio file -->
		<condition property="commit" value="${git.version.commit.online}">
			<and>
				<isset property="git.version.commit.online" />
				<length string="${git.version.commit.online}" trim="yes" length="0" when="greater" />
				<not>
					<isset property="commit" />
				</not>
			</and>
		</condition>

		<!-- If we cannot define anything real, use a default hash name -->
		<condition property="commit" value="archive">
			<not>
				<isset property="commit" />
			</not>
		</condition>

		<echo>Defined RSB version from GIT: ${version}-${commit}</echo>
	</target>

	<target name="init" depends="gitversion">

		<property name="jarname" value="rsb-${version}.jar" />

		<!-- Create the time stamp -->
		<tstamp />
		<!-- Create the build directory structure used by compile -->
		<mkdir dir="${build.dir}" />
		<mkdir dir="${build.dir.src}" />
		<mkdir dir="${build.dir.protocol}" />
		<mkdir dir="${build.dir.spread}" />
		<mkdir dir="${build.dir.test}" />
		<mkdir dir="${build.dir.examples}" />
		<mkdir dir="${coverage.out.dir}" />
		<mkdir dir="${dir.report.unittests.xml}" />
		<mkdir dir="${dir.report.codecheck}" />
		<mkdir dir="${dir.doc}" />
		<mkdir dir="generated-protocol" />
		<echo message="Using pbuf: ${pbuf.lib}" />
		<echo message="Test report dir: ${dir.report.unittests.xml}" />
	</target>

	<!-- Create library classpath -->
	<path id="compile.classpath">
		<pathelement path="${classpath}" />
		<pathelement location="${pbuf.lib}/" />
		<pathelement location="${build.dir.src}" />
		<pathelement location="${build.dir.spread}" />
		<pathelement location="${build.dir.protocol}" />
	</path>

	<!-- Create test classpath -->
	<path id="test.classpath">
		<path refid="compile.classpath" />
		<pathelement location="${lib.dir}/junit-4.11.jar" />
		<pathelement location="${lib.dir}/hamcrest-core.jar" />
		<pathelement location="${build.dir.test}" />
	</path>

	<!-- Create PMD classpath -->
	<path id="pmd.classpath">
		<pathelement location="${lib.dir}/pmd-5.0.4.jar" />
		<pathelement location="${lib.dir}/jaxen-1.1.1.jar" />
		<pathelement location="${lib.dir}/asm-3.2.jar" />
	</path>
	<taskdef name="pmd" classpathref="pmd.classpath" classname="net.sourceforge.pmd.ant.PMDTask" />

	<!-- setup checkstyle -->
	<taskdef resource="checkstyletask.properties" classpath="${lib.dir}/checkstyle-5.6-all.jar" />

	<target name="protocol" depends="init">
		<apply executable="${pbuf.protoc}">
			<arg value="--java_out=${src.dir.protocol}" />
			<arg value="--proto_path=${pbuf.protopath}" />
			<fileset dir="${pbuf.protopath}" includes="**/*.proto" />
		</apply>
		<apply executable="${pbuf.protoc}">
			<arg value="--java_out=${src.dir.protocol}" />
			<arg value="--proto_path=${basedir}/examples/tutorial/protocol" />
			<fileset dir="examples/tutorial/protocol" includes="*.proto" />
		</apply>
	</target>

	<target name="compile" depends="init, protocol" description="compile the source ">
		<javac destdir="${build.dir.protocol}" target="${rsb.java.compatibility}" source="${rsb.java.compatibility}" debug="on" deprecation="on" includeantruntime="false">
			<src path="${src.dir.protocol}" />
			<compilerarg value="-Xlint" />
			<classpath refid="compile.classpath" />
		</javac>
		<javac destdir="${build.dir.spread}" target="${rsb.java.compatibility}" source="${rsb.java.compatibility}" debug="on" deprecation="on" includeantruntime="false">
			<src path="${src.dir.spread}" />
			<classpath refid="compile.classpath" />
		</javac>
		<javac destdir="${build.dir.src}" target="${rsb.java.compatibility}" source="${rsb.java.compatibility}" debug="on" deprecation="on" includeantruntime="false">
			<src path="${src.dir}" />
			<compilerarg value="-Xlint" />
			<classpath refid="compile.classpath" />
		</javac>
		<javac srcdir="${src.dir.examples}" destdir="${build.dir.examples}" target="${rsb.java.compatibility}" source="${rsb.java.compatibility}" debug="on" deprecation="on" includeantruntime="false">
			<compilerarg value="-Xlint" />
			<classpath refid="compile.classpath" />
		</javac>
	</target>

	<target name="test-compile" depends="compile">
		<javac destdir="${build.dir.test}" includeAntRuntime="true" srcdir="${src.dir.test}" target="${rsb.java.compatibility}" source="${rsb.java.compatibility}" debug="on" deprecation="on" bootclasspath="${rsb.java.compatibility}" includeantruntime="false">
			<classpath refid="test.classpath" />
		</javac>
		<copy todir="${build.dir.test}">
			<fileset dir="${src.dir.test}" excludes="**/*.java" />
		</copy>
	</target>

	<target name="dist" depends="compile" description="generate the distribution">
		<!-- Create the distribution directory -->
		<mkdir dir="${dist.dir}/lib" />
		<jar jarfile="${dist.dir}/lib/${jarname}">
			<fileset dir="${build.dir.src}" />
			<fileset dir="${build.dir.spread}" />
			<fileset dir="${build.dir.protocol}" />
			<manifest>
				<attribute name="Implementation-Vendor" value="CoR-Lab Bielefeld University" />
				<attribute name="Implementation-Title" value="rsb-java" />
				<attribute name="Implementation-Version" value="${version}" />
				<attribute name="Last-Commit" value="${commit}" />
			</manifest>
		</jar>
	</target>

	<taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
		<classpath path="${lib.dir}/jacocoant.jar" />
	</taskdef>

	<target name="test" depends="test-compile" description="JUnit tests">

		<property name="coverage" value="false" />
		<echo message="performing coverage analysis: ${coverage}" />

		<forget>
			<exec executable="${spread.daemon}">
				<arg line="-n localhost -c ${basedir}/etc/spread.conf" />
			</exec>
		</forget>

		<sleep seconds="10" />

		<jacoco:coverage destfile="${coverage.out.dir}/coverage.exec" enabled="${coverage}">

			<junit printsummary="yes" haltonfailure="${failtests}" fork="true">

				<formatter type="xml" />
				<formatter type="plain" usefile="false" />

				<classpath refid="test.classpath" />

				<assertions>
					<enable />
				</assertions>

				<batchtest fork="yes" todir="${dir.report.unittests.xml}">
					<fileset dir="${src.dir.test}">
						<include name="**/*Test*.java" />
					</fileset>
				</batchtest>

			</junit>
		</jacoco:coverage>

		<if>
			<equals arg1="${coverage}" arg2="true" />
			<then>
				<jacoco:report>
					<executiondata>
						<file file="${coverage.out.dir}/coverage.exec" />
					</executiondata>
					<structure name="${ant.project.name}">
						<sourcefiles encoding="UTF-8">
							<fileset dir="${src.dir}">
								<include name="rsb/**/*.class" />
							</fileset>
						</sourcefiles>
						<classfiles>
							<fileset dir="${build.dir.src}" />
						</classfiles>
					</structure>
					<html destdir="${coverage.out.dir}" />
					<xml destfile="${coverage.out.dir}/report.xml" />
				</jacoco:report>
			</then>
		</if>

	</target>

	<target name="coverage" description="Coverage report generation">
		<antcall target="test">
			<param name="coverage" value="true" />
		</antcall>
	</target>

	<target name="pmd" depends="init">
		<pmd shortFilenames="true" rulesetfiles="${dir.config.codecheck}/pmd-rules.xml">
			<sourceLanguage name="java" version="${rsb.java.compatibility}" />
			<formatter type="xml" toFile="${dir.report.codecheck}/pmd.xml" />
			<formatter type="html" toFile="${dir.report.codecheck}/pmd_report.html" toConsole="true" />
			<formatter type="text" toConsole="true" />
			<fileset dir="${src.dir}" />
			<fileset dir="${src.dir.test}" />
		</pmd>
	</target>

	<path id="checkstyle.classpath">
		<path refid="compile.classpath" />
		<path refid="test.classpath" />
		<pathelement location="${build.dir}/classes" />
	</path>

	<target name="checkstyle" depends="compile">
		<checkstyle config="${dir.config.codecheck}/checkstyle.xml" classpathref="checkstyle.classpath">
			<fileset dir="${src.dir}" includes="**/*.java" />
			<fileset dir="${src.dir.test}" includes="**/*.java" />
			<formatter type="xml" toFile="${dir.report.codecheck}/checkstyle_errors.xml" />
			<property key="config_loc" value="${dir.config.codecheck}" />
		</checkstyle>
		<xslt in="${dir.report.codecheck}/checkstyle_errors.xml" out="${dir.report.codecheck}/checkstyle_report.html" style="${dir.config.codecheck}/checkstyle-noframes.xsl" />
	</target>

	<target name="codecheck" depends="pmd,checkstyle" />

	<target name="clean" description="clean up">
		<!-- Delete the ${build} and ${dist} directory trees -->
		<delete dir="${build.dir}" />
		<delete dir="${src.dir.protocol}" />
		<delete dir="${dist.dir}" />
		<delete dir="${coverage.out.dir}" />
		<delete dir="${dir.report.unittests.xml}" />
		<delete dir="${dir.report.codecheck}" />
		<delete dir="${dir.doc}" />
	</target>

	<target name="install" depends="dist">
		<echo message="Installing to ${install.dir}." />
		<mkdir dir="${install.dir}" />
		<copy file="${dist.dir}/lib/${jarname}" todir="${install.dir}" />
		<symlink link="${install.dir}/rsb.jar" resource="${install.dir}/${jarname}" overwrite="true" />
		<mkdir dir="${license.dir}" />
		<copy file="COPYING.txt" tofile="${license.dir}/copyright" />
	</target>

	<target name="doc">
		<javadoc excludepackagenames="org.jaxen.xom" destdir="${dir.doc}" author="true" version="true" use="true" windowtitle="rsb-java">

			<classpath refid="test.classpath" />

			<fileset dir="." defaultexcludes="yes">
				<exclude name="**/jaxen/**/*" />
				<include name="src/**/*.java" />
			</fileset>

		</javadoc>
	</target>

</project>
