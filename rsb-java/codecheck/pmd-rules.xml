<?xml version="1.0" encoding="UTF-8"?>
<ruleset xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name=""
    xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">

    <description>rsb-java rules</description>

    <!-- Files we want to scan -->
    <exclude-pattern>.*/java/spread/.*</exclude-pattern>

    <rule ref="rulesets/java/basic.xml" />
    <rule ref="rulesets/java/braces.xml" />
    <rule ref="rulesets/java/clone.xml" />
    <rule ref="rulesets/java/codesize.xml">
        <!-- decide for one complexity metric and all -->
        <exclude name="CyclomaticComplexity" />
        <exclude name="ModifiedCyclomaticComplexity" />
    </rule>
    <rule ref="rulesets/java/empty.xml" />
    <rule ref="rulesets/java/coupling.xml">
        <exclude name="LoosePackageCoupling" />
        <exclude name="LawOfDemeter" />
    </rule>
    <rule ref="rulesets/java/design.xml">
        <exclude name="SimplifyBooleanReturns" />
    </rule>
    <rule ref="rulesets/java/finalizers.xml" />
    <rule ref="rulesets/java/imports.xml" />
    <rule ref="rulesets/java/junit.xml">
        <exclude name="JUnitAssertionsShouldIncludeMessage" />
    </rule>
    <rule ref="rulesets/java/logging-java.xml">
        <exclude name="GuardLogStatementJavaUtil" />
    </rule>
    <rule ref="rulesets/java/migrating_to_15.xml" />
    <rule ref="rulesets/java/migrating_to_junit4.xml" />
    <rule ref="rulesets/java/naming.xml">
        <exclude name="GenericsNaming" />
        <exclude name="AbstractNaming" />
    </rule>
    <rule ref="rulesets/java/optimizations.xml">
        <exclude name="RedundantFieldInitializer" />
        <exclude name="AvoidInstantiatingObjectsInLoops" />
    </rule>
    <rule ref="rulesets/java/strictexception.xml" />
    <rule ref="rulesets/java/strings.xml">
        <exclude name="ConsecutiveAppendsShouldReuse" />
        <exclude name="AvoidDuplicateLiterals" />
    </rule>
    <rule ref="rulesets/java/typeresolution.xml" />
    <rule ref="rulesets/java/unnecessary.xml">
        <exclude name="UselessParentheses" />
    </rule>
    <rule ref="rulesets/java/unusedcode.xml" />

    <!-- Allow a bit longer variable names -->
    <rule ref="rulesets/java/naming.xml/LongVariable">
        <properties>
             <property name="minimum" value="25"/>
        </properties>
    </rule>

    <!-- Allow more than one assert statement per junit test -->
    <rule ref="rulesets/java/junit.xml/JUnitTestContainsTooManyAsserts">
        <properties>
             <property name="maximumAsserts" value="5"/>
        </properties>
    </rule>

    <!-- Allow empty catch block with an explanatory comment -->
    <rule ref="rulesets/java/empty.xml/EmptyCatchBlock">
        <properties>
             <property name="allowCommentedBlocks" value="true"/>
        </properties>
    </rule>

    <!-- Allow more static imports for unit tests -->
    <rule ref="rulesets/java/imports.xml/TooManyStaticImports">
        <properties>
             <property name="maximumStaticImports" value="15"/>
        </properties>
    </rule>

    <rule ref="rulesets/java/codesize.xml/StdCyclomaticComplexity">
        <properties>
             <!-- Do not compute cyclomatic complexity for classes. We already have it for methods -->
             <property name="showClassesComplexity" value="false"/>
             <!-- equals and hashCode are often complex and they require this... -->
             <property name="violationSuppressRegex" value=".*method '(equals|hashCode)'.*"/>
        </properties>
    </rule>
    <rule ref="rulesets/java/codesize.xml/NPathComplexity">
        <properties>
             <!-- equals and hashCode are often complex and they require this... -->
             <property name="violationSuppressRegex" value=".*method (equals|hashCode)\(\).*"/>
        </properties>
    </rule>
</ruleset>
